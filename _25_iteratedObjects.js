// –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º (–∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å for...of —Å –Ω–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å), –Ω—É–∂–Ω–æ
// –¥–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –∏–º–µ–Ω–µ–º Symbol.iterator
//
// 1) –ö–æ–≥–¥–∞ —Ü–∏–∫–ª for..of –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–¥–∏–Ω —Ä–∞–∑ (–∏–ª–∏ –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É,
// –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω). –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä ‚Äì –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º next.
// 2) –î–∞–ª—å—à–µ for..of —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º.
// 3) –ö–æ–≥–¥–∞ for..of —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ next()
// —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
// 4) –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ next() –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∏–¥ {done: Boolean, value: any},
// –≥–¥–µ done=true –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∏—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ value —Å–æ–¥–µ—Ä–∂–∏—Ç
// –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
let range = {
    from: 1,
    to: 5
};

// 1. –≤—ã–∑–æ–≤ for..of —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
range[Symbol.iterator] = function() {

    // ...–æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞:
    // 2. –î–∞–ª–µ–µ, for..of —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —É –Ω–µ–≥–æ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    return {
        current: this.from,
        last: this.to,

        // 3. next() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ for..of
        next() {
            // 4. –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ {done:.., value :...}
            if (this.current <= this.last) {
                return { done: false, value: this.current++ };
            } else {
                return { done: true };
            }
        }
    };
};

// —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç!
for (let num of range) {
    console.log(num); // 1, –∑–∞—Ç–µ–º 2, 3, 4, 5
}


// –°—Ç—Ä–æ–∫–∞ - –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç
for (let char of "test") {
    // —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 4 —Ä–∞–∑–∞: –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    console.log( char ); // t, –∑–∞—Ç–µ–º e, –∑–∞—Ç–µ–º s, –∑–∞—Ç–µ–º t
}
// –†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–∞–∂–µ —Å —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
let str = 'ùí≥üòÇ';
for (let char of str) {
    console.log( char ); // ùí≥, –∞ –∑–∞—Ç–µ–º üòÇ
}


// –Ø–≤–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è. –í—Ä—É—á–Ω—É—é, –ø—Ä—è–º—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏
let str2 = 'Hello';
// The same as for...of. But it's more flexible. We can stop iteration in any time.
let iterator = str2[Symbol.iterator]();
while (true) {
    let result = iterator.next();
    if (result.done) break;
    console.log(result.value);
}


// –ü—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤ - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ length, –Ω–æ –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω

// –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤—ã.
// –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º–∏ –∫–∞–∫ —Å "–Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏" –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –º–µ—Ç–æ–¥ Array.from!!!
let arrayLike = {
    0: "Hello",
    1: "World",
    length: 2
};
let arr = Array.from(arrayLike); // —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤–∞ –∏–ª–∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
console.log(arr);
let arr2 = Array.from(range);
console.log(arr2);

// Array.from(obj[, mapFn, thisArg]) - –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å
// —Ñ—É–Ω–∫—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –º–∞—Å—Å–∏–≤,
// –∞ thisArg –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å this –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
let arr3 = Array.from(range, num => num * num);
console.log(arr3); // 1,4,9,16,25
