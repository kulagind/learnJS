let x = 1;
x = -x; // унарный оператор минус
x = 7 - x; // бинарный оператор минус

let string = "first" + " second"; // сложение строн - конкатинация
// у конкатинации приоритер перед сложением чисел, поэтому если хоть один операнд - строка, то произойдет преобразования второго операнда в строку. Другие операторы (*/-) работают с числами и преобразуют в числа.
console.log(2 + 2 + "1"); // 41 бинарный плюс
// унарный плюс преобразует в число!
// +"true" === Number(true)
console.log(+""); // 0
console.log(+true); // 1

// У унарных операторов приоритет выше чем у бинарных!
// приоритеты: унарный плюс/минус > умножение/деление > сложение/вычитание > ... > присваивание/вызов с присваиванием(+= и тд) > запятая

let a = 1;
let b = 2;
let c = 3 - (a = b + 1);
console.log(a); // 3
console.log(c); // 0

// % - остаток от деления!
console.log(5 % 2); // 1

// ** - введение в степень (если брать дробь то 1/2 корень квадратный или 1/3 корень кубический и тд)
console.log(2 ** 3); // 8

// инкремент / декремент - можно применить только к переменной!!!
let counter = 2;
// постфиксная форма возвращает старое значение, а префиксная - новое!
console.log(counter++); // 2 - старое значение, но counter = 3
console.log(++counter); // 4
counter2 = 1;
console.log(2 * counter2++); // 2, тк сначала вернул 1, а затем ++
counter3 = 1;
console.log(2 * ++counter3); // 4, тк сначала ++, а затем вернул

let n = 2;
n += 5; // 7
n *= 2; // 14
n -= 2; // 12
n /= 6; // 2

// , - оператор запятая.
// вычисления производятся по обе стороны запятой поочереди, но отбрасывается все кроме последнего
let a = (1 + 2, 3 + 4); // 7
for (a = 1, b = 2, c = a * b; a < 10; a++) {
  // ...
}
