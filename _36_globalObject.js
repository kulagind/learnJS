// Глобальный объект предоставляет переменные и функции, доступные в любом месте программы.
// По умолчанию это те, что встроены в язык или среду исполнения.

// В браузере он называется window, в Node.js — global, в другой среде исполнения может называться иначе.

// Недавно globalThis был добавлен в язык как стандартизированное имя для глобального объекта,
// которое должно поддерживаться в любом окружении. В некоторых браузерах, например Edge не на Chromium,
// globalThis ещё не поддерживается, но легко реализуется с помощью полифила.

// Далее мы будем использовать window, полагая, что наша среда – браузер.
// Если скрипт может выполняться и в другом окружении, лучше будет globalThis.

// Ко всем свойствам глобального объекта можно обращаться напрямую!
console.log('Hi');
window.console.log('Hi again'); // the same

// !!!!!!В браузере переменные объявленные с помощью var - становятся свойствами глобального объекта!!!!!!
var gVar = 5;
console.log(window.gVar);

// Если свойство настолько важное, что вы хотите сделать его доступным для всей программы,
// запишите его в глобальный объект напрямую:
window.currentUser = {
    name: "John"
};
let currentUser = {
    name: "Dima"
};
console.log(window.currentUser.name); // John - безопасное получение глобальной переменной,
// при наличии локальной с тем же именем
console.log(currentUser.name); // Dima

// При этом обычно не рекомендуется использовать глобальные переменные. Следует применять их как можно
// реже. Дизайн кода, при котором функция получает входные параметры и выдаёт определённый результат,
// чище, надёжнее и удобнее для тестирования, чем когда используются внешние, а тем более глобальные
// переменные.

// Использование для полифилов!
// Глобальный объект можно использовать, чтобы проверить поддержку современных возможностей языка.
if (!window.Promise) {
    alert("Ваш браузер очень старый! И не поддерживает Promises");
    // window.Promise = ... собственная реализация современной возможности языка
}
