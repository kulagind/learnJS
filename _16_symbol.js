// Символ гарантированно уникален.
// Применяются для:
// - "скрытых" свойств объектов
// - системные символы Symbol.* для изменения встроенного поведения ряда объектов
let id = Symbol('id'); // описание символа это просто метка, которая ни на что не влияет

// символы не преобразуются автоматически в строку!!!
// alert(id); - ошибка
alert(id.toString()); // Symbol(id)

// если объект user принадлежит стороннему коду и тот код тоже работает с ним,
// то создавая символ к нему тяжело случайно обратиться
// и скорее всего добавление поля символа к чужому объекту не вызовет никаких проблем
// Символы всегда уникальны! даже если их имена совпадают.
// Т.е. несколько библиотек могут создать свои Symbol(id) в нашем объекте
// и они не пересекутся!
let user = {
    name: 'Vasya'
    // [id]:
}
user[id] = 1;
console.log(user[id]);
console.log(user);

// Символы игнорируются циклами for...in и Object.keys()!!!
// Это часть принципа "сокрытие символьных свойств"
for (let prop in user) {
    console.log(prop); // name
}
console.log('Напрямую:', user[id]); // 1. Т.к. напрямую доступ существует

// Object.assign({}, user) - клонирует и строковые, и символьные ключи!!!

// -------------------------------------------------------------------

// Глобальные символы. Используются, если доступ необходим в любом месте кода
// Для доступа к одному и тому же полю Symbol(id) в разных частях приложения
// Существует "глобальный реестр символов". Мы можем при обращении
// получать необходимый нам символ.

// Symbol.for(key) - читает символ из глобального реестра и возвращает его,
// если его - нет, то создает
// !!!ВНИМАНИЕ Symbol() - создает локальный символ и не заносит в глобальный реестр символов
// Получить символ по имени:
let id2 = Symbol.for('id'); // если символа id нет, то создаст его
let id3 = Symbol.for('id'); // если символа id нет, то создаст его
console.log(id2 === id3); // true, т.к. это один символ в разных переменных!!!
console.log(Symbol.keyFor(id2)); // 'id' - получить имя по символу

// -------------------------------------------------------------------

// Существуют еще системные символы.
// Например:
// Symbol.toPrimitive - позволяет описать правила для объекта, согласно которым
// он будет преобразовываться в примитив.
// и тд.

// Object.getOwnPropertySymbols(obj) - получить свойства объекта с ключами-символами
// Reflect.ownKeys(obj) - возвращает все ключи объекта, включая символьные


