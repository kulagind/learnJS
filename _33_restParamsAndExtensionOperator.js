// Многие встроенные функции JavaScript поддерживают произвольное количество аргументов.
// Math.max(arg1, arg2, ..., argN) – вычисляет максимальное число из переданных.
// Object.assign(dest, src1, ..., srcN) – копирует свойства из исходных объектов src1..N в целевой объект dest.

// Остаточные параметры (...). Должен располагаться в конце аргументов
// Функцию можно вызвать с любым кол-вом аргументов, но использоваться будут только те, которые объявлены аргументами функции
function sumAll(...args) { // args — имя массива
    let sum = 0;
    for (let arg of args) sum += arg;
    return sum;
}
console.log( sumAll(1) ); // 1
console.log( sumAll(1, 2, 3) ); // 6

// ARGUMENTS - псевдомассив, хранящий все аргументы функции.
// - Если мы обратимся к arguments из стрелочной функции, то получим аргументы внешней «нормальной» функции.
// !!!!!!Все аргументы функции находятся в псевдомассиве arguments под своими порядковыми номерами!!!!!!
// - Раньше в языке не было остаточных параметров, и получить все аргументы функции можно было только с
// помощью arguments. Этот способ всё ещё работает, мы можем найти его в старом коде.
// - Но у него есть один недостаток. Хотя arguments похож на массив, и его тоже можно перебирать,
// это всё же не массив. Он не поддерживает методы массивов, поэтому мы не можем, например,
// вызвать arguments.map(...).
function showName() {
    console.log( arguments.length );
    console.log( arguments[0] );
    console.log( arguments[1] );
    // Объект arguments можно перебирать
    // for (let arg of arguments) alert(arg);
}
showName("Юлий", "Цезарь"); // Вывод: 2, Юлий, Цезарь
showName("Илья"); // Вывод: 1, Илья, undefined (второго аргумента нет)

// -------------------------------------------------------------------------------------
// Оператор расширения. Расширяет перебираемый объект в список аргументов.
// Подж капотом использует итераторы на подобии for...of
let arr = [1, 3, 6, 2, -10, 4];
let arr2 = [4, 13, -6, 6, 1, 1];
console.log(Math.max(arr)); // NaN, т.к. надо передавать численные аргументы, а не массив
console.log(Math.max(...arr)); // 6
console.log(Math.max(...arr, 10)); // 10
let arr3 = [...arr, ...arr2]; // слить 2 массива в 1
let str = 'Hello';
console.log(str); // Hello
console.log(...str); // H e l l o
console.log([...str]); // ['H','e','l','l','o']
console.log(Array.from(str)); // ['H','e','l','l','o'] Почти то же самое что и строка выше, но:
// - Array.from работает как с псевдомассивами, так и с итерируемыми объектами.
// - Оператор расширения работает только с итерируемыми объектами.


// - Если ... располагается в конце списка аргументов функции, то это «остаточные параметры».
// Он собирает остальные неуказанные аргументы и делает из них массив.
// - Если ... встретился в вызове функции или где-либо ещё, то это «оператор расширения».
// Он извлекает элементы из массива.

// Полезно запомнить:
// 1) Остаточные параметры используются, чтобы создавать новые функции с неопределённым числом аргументов.
// 2) С помощью оператора расширения можно вставить массив в функцию, которая по умолчанию работает с
// обычным списком аргументов.
